import streamlit as st
import pandas as pd
import os
import zipfile
from datetime import datetime
import matplotlib.pyplot as plt
from fpdf import FPDF
from io import BytesIO
from views.helpers import load_processed_data
import numpy as np

def generate_business_roi_pdf(df: pd.DataFrame, pdf_path: str) -> None:
    class ROIReportPDF(FPDF):
        def header(self): pass
        def footer(self):
            if self.page_no() == 1: return
            self.set_y(-15)
            self.set_font("Noto", "", 8)
            self.set_text_color(100)
            self.cell(0, 10, f"Generated by Automation Analytics Engine ‚Ä¢ Page {self.page_no()}", align="C")

        def add_cover(self):
            self.add_page()
            self.set_font("Noto", "B", 20)
            self.cell(0, 80, "üìÑ Business ROI Showback Report", ln=True, align="C")
            self.set_font("Noto", "", 13)
            self.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d')}", ln=True, align="C")
            self.cell(0, 10, "Prepared by: Automation Analytics Engine", ln=True, align="C")
            if os.path.exists("assets/logo.png"):
                self.image("assets/logo.png", x=90, w=40)

        def add_methodology(self):
            self.add_page()
            self.set_font("Noto", "B", 14)
            self.cell(0, 10, "üìò Methodology & Approach", ln=True)
            self.ln(5)
            self.set_font("Noto", "", 11)
            text = (
                "This ROI report summarizes storage optimization recommendations generated by IBM Turbonomic.\n\n"
                "Key Steps:\n"
                "1. Source data was collected from Turbonomic's recommendation engine.\n"
                "2. Recommendations were classified by location type (Data Centers and Business Domains).\n"
                "3. Estimated cost savings were computed using:\n"
                "   Cost Savings (USD) = File Size (GB) √ó Unit Cost (configured)\n\n"
                "Carbon savings (kg CO2) were estimated using industry conversion factors for data center cooling impact.\n\n"
                "This report includes summaries, breakdowns, visualizations, and total estimated business value."
            )
            self.multi_cell(0, 7, text)

        def add_summary_metrics(self, summary_df: pd.DataFrame, totals: dict):
            self.add_page()
            self.set_font("Noto", "B", 14)
            self.cell(0, 10, "üìä Summary Insights", ln=True)
            self.ln(8)
            self.set_font("Noto", "", 12)
            self.cell(0, 10, f"üì¶ Total Recommendations: {totals['total_count']:,}", ln=True)
            self.cell(0, 10, f"üíæ Total Reclaimable Storage: {totals['total_storage']:,.2f} GB", ln=True)
            self.cell(0, 10, f"üí∞ Total Estimated Savings: ${totals['total_savings_usd']:,.2f} USD / AED {totals['total_savings_aed']:,.2f}", ln=True)
            self.cell(0, 10, f"üåø Carbon Offset Potential: {totals['total_carbon']:,.2f} kg CO2", ln=True)
            self.ln(8)
            
            # Data Centers Summary
            self.set_font("Noto", "B", 12)
            self.cell(0, 10, "üè¢ Data Centers Impact:", ln=True)
            self.set_font("Noto", "", 11)
            dc_summary = summary_df[summary_df['Location Type'] == 'Data Center'].sort_values(by="Estimated Cost Savings (USD)", ascending=False)
            for _, row in dc_summary.iterrows():
                self.cell(0, 8, f"üîπ {row['Location']} (${row['Estimated Cost Savings (USD)']:,.2f})", ln=True)
            
            self.ln(5)
            # Business Domains Summary
            self.set_font("Noto", "B", 12)
            self.cell(0, 10, "üè¨ Top Business Domains by Savings:", ln=True)
            self.set_font("Noto", "", 11)
            bd_summary = summary_df[summary_df['Location Type'] == 'Business Domain'].sort_values(by="Estimated Cost Savings (USD)", ascending=False).head(3)
            for _, row in bd_summary.iterrows():
                self.cell(0, 8, f"üîπ {row['Location']} (${row['Estimated Cost Savings (USD)']:,.2f})", ln=True)

        def add_visual(self, title: str, image_path: str):
            self.add_page()
            self.set_font("Noto", "B", 12)
            self.cell(0, 10, title, ln=True)
            self.image(image_path, x=10, w=self.w - 20)

    # Summary with location types - using correct column names
    summary_df = df.groupby(['location_type', 'inferred_location'])[[
        "file_size_(gb)", 
        "storage_cost_usd", 
        "storage_cost_aed", 
        "carbon_savings"
    ]].sum().reset_index()
    
    summary_df.columns = [
        "Location Type",
        "Location",
        "Total Reclaimable Storage (GB)",
        "Estimated Cost Savings (USD)",
        "Estimated Cost Savings (AED)",
        "Carbon Offset (kg CO‚ÇÇ)"
    ]
    
    # Calculate totals
    totals = {
        'total_count': len(df),
        'total_storage': summary_df['Total Reclaimable Storage (GB)'].sum(),
        'total_savings_usd': summary_df['Estimated Cost Savings (USD)'].sum(),
        'total_savings_aed': summary_df['Estimated Cost Savings (AED)'].sum(),
        'total_carbon': summary_df['Carbon Offset (kg CO‚ÇÇ)'].sum()
    }
    
    os.makedirs("assets", exist_ok=True)

    # Charts with location type distinction
    plt.figure(figsize=(12, 5))
    colors = {'Data Center': '#2ecc71', 'Business Domain': '#3498db', 'Unknown': '#95a5a6'}
    for loc_type in summary_df['Location Type'].unique():
        data = summary_df[summary_df['Location Type'] == loc_type]
        plt.bar(data["Location"], data["Estimated Cost Savings (USD)"], 
                label=loc_type, color=colors.get(loc_type))
    plt.title("Estimated Cost Savings by Location")
    plt.xticks(rotation=45, ha='right')
    plt.legend(title="Location Type")
    plt.tight_layout()
    plt.savefig("assets/savings_bar_chart.png")
    plt.close()

    # Pie charts for Data Centers and Business Domains
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
    
    # Data Centers pie
    dc_data = summary_df[summary_df['Location Type'] == 'Data Center']
    if not dc_data.empty:
        ax1.pie(
            dc_data["Estimated Cost Savings (USD)"],
            labels=dc_data["Location"],
            autopct="%1.1f%%",
            colors=[plt.cm.Greens(i) for i in np.linspace(0.4, 0.8, len(dc_data))]
        )
        ax1.set_title("Data Centers Share of Savings")
    
    # Business Domains pie
    bd_data = summary_df[summary_df['Location Type'] == 'Business Domain']
    if not bd_data.empty:
        ax2.pie(
            bd_data["Estimated Cost Savings (USD)"],
            labels=bd_data["Location"],
            autopct="%1.1f%%",
            colors=[plt.cm.Blues(i) for i in np.linspace(0.4, 0.8, len(bd_data))]
        )
        ax2.set_title("Business Domains Share of Savings")
    
    plt.tight_layout()
    plt.savefig("assets/savings_pie_chart.png")
    plt.close()

    if "created_date" in df.columns:
        df["created_date"] = pd.to_datetime(df["created_date"], errors="coerce")
        df["created_month"] = df["created_date"].dt.to_period("M").astype(str)
        
        # Trend by location type
        plt.figure(figsize=(12, 5))
        for loc_type in df['location_type'].unique():
            data = df[df['location_type'] == loc_type]
            trend = data.groupby("created_month").size().reset_index()
            trend.columns = ["Month", "Count"]
            plt.plot(trend["Month"], trend["Count"], 
                    marker="o", label=loc_type, color=colors.get(loc_type))
        
        plt.title("Monthly Trend of Recommendations by Location Type")
        plt.xticks(rotation=45)
        plt.legend(title="Location Type")
        plt.tight_layout()
        plt.savefig("assets/recommendation_trend.png")
        plt.close()

    pdf = ROIReportPDF()
    pdf.add_font("Noto", "", "assets/NotoSans-Regular.ttf", uni=True)
    pdf.add_font("Noto", "B", "assets/NotoSans-Bold.ttf", uni=True)
    pdf.set_font("Noto", "", 12)

    pdf.add_cover()
    pdf.add_methodology()
    pdf.add_summary_metrics(summary_df, totals)
    pdf.add_visual("üìä Estimated Cost Savings by Location", "assets/savings_bar_chart.png")
    pdf.add_visual("üìà Share of Total Savings by Location Type", "assets/savings_pie_chart.png")
    if os.path.exists("assets/recommendation_trend.png"):
        pdf.add_visual("üìâ Monthly Trend of Recommendations", "assets/recommendation_trend.png")
    pdf.output(pdf_path)


def render():
    st.title("üíº Business ROI Overview")
    df = load_processed_data()

    if df is None or "inferred_location" not in df.columns:
        st.warning("No processed data found.")
        return

    # Ensure location type information is present
    if 'location_type' not in df.columns:
        data_centers = {'AUH', 'DXB', 'AJM'}
        df['location_type'] = df['inferred_location'].apply(
            lambda x: 'Data Center' if x in data_centers else 'Business Domain' if pd.notna(x) else 'Unknown'
        )

    # Summary with location types - using correct column names from calculate_financial_metrics
    summary_df = df.groupby(['location_type', 'inferred_location'])[[
        "file_size_(gb)", 
        "storage_cost_usd", 
        "storage_cost_aed", 
        "carbon_savings"
    ]].sum().reset_index()
    
    summary_df.columns = [
        "Location Type",
        "Location",
        "Total Reclaimable Storage (GB)",
        "Estimated Cost Savings (USD)",
        "Estimated Cost Savings (AED)",
        "Carbon Offset (kg CO‚ÇÇ)"
    ]

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pdf_filename = f"business_roi_report_{timestamp}.pdf"
    csv_filename = f"business_roi_summary_{timestamp}.csv"
    zip_filename = f"business_roi_bundle_{timestamp}.zip"

    with st.container():
        col1, col2, col3 = st.columns(3)

        with col1:
            csv = summary_df.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="üì• Download CSV Summary",
                data=csv,
                file_name=csv_filename,
                mime="text/csv"
            )

        with col2:
            generate_business_roi_pdf(df, pdf_filename)
            with open(pdf_filename, "rb") as f:
                st.download_button(
                    label="üìÑ Download PDF Report",
                    data=f,
                    file_name=pdf_filename,
                    mime="application/pdf"
                )

        with col3:
            generate_business_roi_pdf(df, pdf_filename)
            summary_df.to_csv(f"assets/{csv_filename}", index=False)
            zip_buffer = BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zipf:
                zipf.write(pdf_filename, arcname=pdf_filename)
                zipf.write(f"assets/{csv_filename}", arcname=csv_filename)
                for img in ["savings_bar_chart.png", "savings_pie_chart.png", "recommendation_trend.png"]:
                    chart_file = f"assets/{img}"
                    if os.path.exists(chart_file):
                        zipf.write(chart_file, arcname=os.path.basename(chart_file))

            zip_buffer.seek(0)
            st.download_button(
                label="üì¶ Download Full ZIP Report",
                data=zip_buffer,
                file_name=zip_filename,
                mime="application/zip"
            )

    # Display summary by location type
    st.markdown("### üóÇ Showback Report by Location")
    
    # Add location type filter
    location_types = ['All'] + sorted(df['location_type'].unique().tolist())
    selected_type = st.selectbox('Filter by Location Type:', location_types)
    
    # Filter data based on selection
    if selected_type != 'All':
        display_df = summary_df[summary_df['Location Type'] == selected_type]
    else:
        display_df = summary_df
        
    st.dataframe(display_df.style.format({
        "Total Reclaimable Storage (GB)": "{:,.2f}",
        "Estimated Cost Savings (USD)": "${:,.2f}",
        "Estimated Cost Savings (AED)": "AED {:,.2f}",
        "Carbon Offset (kg CO‚ÇÇ)": "{:,.2f}"
    }), use_container_width=True, hide_index=True)
